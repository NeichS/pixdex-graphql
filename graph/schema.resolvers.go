package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"

	"github.com/NeichS/graphql-pixdex/data"
	"github.com/NeichS/graphql-pixdex/graph/model"
)

// CreateContenidoAudiovisual is the resolver for the createContenidoAudiovisual field.
func (r *mutationResolver) CreateContenidoAudiovisual(ctx context.Context, input model.NuevoContenidoAudioVisual) (*model.ContenidoAudioVisual, error) {
	panic(fmt.Errorf("not implemented: CreateContenidoAudiovisual - createContenidoAudiovisual"))
}

// ContenidoAudioVisual is the resolver for the ContenidoAudioVisual field.
func (r *queryResolver) ContenidoAudioVisual(ctx context.Context) ([]*model.ContenidoAudioVisual, error) {
	var contenidoMapped []*model.ContenidoAudioVisual
	return contenidoMapped, nil
}

// ContenidoAudioVisualMapped is the resolver for the ContenidoAudioVisualMapped field.
func (r *queryResolver) ContenidoAudioVisualMapped(ctx context.Context) ([]*model.ContenidoAudioVisualMapped, error) {
	var contenidoMapped []*model.ContenidoAudioVisualMapped
	for _, contenido := range data.ContenidosAudiovisuales {
		contenidoMapped = append(contenidoMapped, mapContenidoVisual(contenido))
	}
	return contenidoMapped, nil
}

// Contenido is the resolver for the contenido field.
func (r *queryResolver) Contenido(ctx context.Context, id string) (*model.ContenidoAudioVisualMapped, error) {

	contenidoMapped, err := data.GetContenidoPorID(id)
	if err != nil {
		return nil, nil
	}
	return mapContenidoVisual(contenidoMapped), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

func mapContenidoVisual(content *model.ContenidoAudioVisual) *model.ContenidoAudioVisualMapped {
	generos := make([]*model.Genero, 0, len(content.Generos))
	for _, generoID := range content.Generos {
		genero := data.GetGeneroPorId(generoID)
		if genero != nil {
			generos = append(generos, genero)
		}
	}
	tipo := data.GetTipoPorId(content.TipoID)
	return &model.ContenidoAudioVisualMapped{
		ID:          content.ID,
		Nombre:      content.Nombre,
		Descripcion: content.Descripcion,
		Generos:     generos,
		Tipo:        &tipo,
		ImageURL:    content.ImageURL,
	}
}
